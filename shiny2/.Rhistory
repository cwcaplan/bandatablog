rbsMnd <- rbsM[!duplicated(rbsM$song),]
#setwd("C:/Users/Seth/Documents/bandatablog/data")
#write.csv(rbsM, "r and b singles weekly number ones.csv", row.names=F)
#write.csv(rbsMnd, "r and b singles no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(rbsM, "r and b singles weekly number ones.csv", row.names=F)
write.csv(rbsMnd, "r and b singles no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/data")
write.csv(rbsM, "r and b singles weekly number ones.csv", row.names=F)
write.csv(rbsMnd, "r and b singles no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/Billboard Country/weekly top songs")
## got data from
## http://www.billboard.com/archive/charts/1985/country-songs
# builds weekly number ones list
wno <- list()
cosM <- data.frame()
year <- "1984"
for (i in 1:31) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("country singles ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
cosM <- rbind(cosM, wno[[i]])
}
#write.csv(cosM, "weekly number ones.csv", row.names=F)
names(cosM) <- c("date", "song", "artist")
weeksSong <- data.frame(table(cosM[,2]), stringsAsFactors=F)
weeksSong <- weeksSong[order(weeksSong$Freq, decreasing=T),]
weeksSong$Var1 <- as.character(weeksSong$Var1)
weeksArtist <- data.frame(table(cosM[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
cosM$index <- rep(0, nrow(cosM))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(cosM[grep("Timberlake", cosM$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(cosM)) {
pjPick <- pjsM[pjsM$year==substring(cosM[i,1], 1, 4) |
pjsM$year==as.character(as.numeric(substring(cosM[i,1], 1, 4))-1), ]
#matching, but only lower case
hotsong <- tolower(unlist(strsplit(cosM[i,2], " \\("))[1])
hotsong <- gsub("[`'-]", " ", hotsong)
hotsong <- gsub("  +", " ", hotsong)
hotsong <- gsub("&", "and", hotsong)
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
song <- tolower(unlist(strsplit(pjPick[j,3], " \\("))[1])
song <- unlist(strsplit(song, "/"))
song <- gsub("[`'-]", " ", song)
song <- gsub("  +", " ", song)
song <- gsub("&", "and", song)
if(length(song)==1) {
if(hotsong==song) {
cosM[i,4] <- pjPick[j,7]
}
} else if (length(song)==2) {
if(hotsong==song[1]|hotsong==song[2]) {
cosM[i,4] <- pjPick[j,7]
}
}
}
}
}
#looking at all the albums (no duplicates for mulitple weeks on chart)
cosMnd <- cosM[!duplicated(cosM$song),]
setwd("C:/Users/Seth/Documents/bandatablog/data")
#write.csv(cosM, "country singles weekly number ones.csv", row.names=F)
#write.csv(cosMnd, "country singles no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(cosM, "country singles weekly number ones.csv", row.names=F)
write.csv(cosMnd, "country singles no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/data")
write.csv(cosM, "country singles weekly number ones.csv", row.names=F)
write.csv(cosMnd, "country singles no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/Billboard Hot 100/weekly top songs")
## got data from
## http://www.billboard.com/archive/charts/1983/hot-100
# builds weekly number ones list
wno <- list()
h1M <- data.frame()
year <- "1982"
for (i in 1:33) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("hot100-", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
h1M <- rbind(h1M, wno[[i]])
}
#write.csv(h1M, "weekly number ones.csv", row.names=F)
names(h1M) <- c("date", "song", "artist")
weeksSong <- data.frame(table(h1M[,2]), stringsAsFactors=F)
weeksSong <- weeksSong[order(weeksSong$Freq, decreasing=T),]
weeksSong$Var1 <- as.character(weeksSong$Var1)
weeksArtist <- data.frame(table(h1M[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
h1M$index <- rep(0, nrow(h1M))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(h1M[grep("Timberlake", h1M$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(h1M)) {
pjPick <- pjsM[pjsM$year==substring(h1M[i,1], 1, 4) |
pjsM$year==as.character(as.numeric(substring(h1M[i,1], 1, 4))-1), ]
#matching, but only lower case
hotsong <- tolower(unlist(strsplit(h1M[i,2], " \\("))[1])
hotsong <- gsub("[`'-]", " ", hotsong)
hotsong <- gsub("  +", " ", hotsong)
hotsong <- gsub("&", "and", hotsong)
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
song <- tolower(unlist(strsplit(pjPick[j,3], " \\("))[1])
song <- unlist(strsplit(song, "/"))
song <- gsub("[`'-]", " ", song)
song <- gsub("  +", " ", song)
song <- gsub("&", "and", song)
if(length(song)==1) {
if(hotsong==song) {
h1M[i,4] <- pjPick[j,7]
}
} else if (length(song)==2) {
if(hotsong==song[1]|hotsong==song[2]) {
h1M[i,4] <- pjPick[j,7]
}
}
}
}
}
#looking at all the albums (no duplicates for mulitple weeks on chart)
h1Mnd <- h1M[!duplicated(h1M$song),]
#setwd("C:/Users/Seth/Documents/bandatablog/data")
#write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
#write.csv(h1Mnd, "hot 100 no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
write.csv(h1Mnd, "hot 100 no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/data")
write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
write.csv(h1Mnd, "hot 100 no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/Billboard Country/weekly top albums")
## got data from
## http://www.billboard.com/archive/charts/1985/country-albums
# builds weekly number ones list
wno <- list()
coM <- data.frame()
year <- "1984"
for (i in 1:31) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("country albums ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
coM <- rbind(coM, wno[[i]])
}
names(coM) <- c("date", "album", "artist")
weeksAlbum <- data.frame(table(coM[,2]), stringsAsFactors=F)
weeksAlbum <- weeksAlbum[order(weeksAlbum$Freq, decreasing=T),]
weeksAlbum$Var1 <- as.character(weeksAlbum$Var1)
weeksArtist <- data.frame(table(coM[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
coM$index <- rep(0, nrow(coM))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(coM[grep("Timberlake", coM$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(coM)) {
pjPick <- pjM[pjM$year==substring(coM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(coM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(coM[i,2])==tolower(pjPick[j,3])) {
coM[i,4] <- pjPick[j,8]
}
}
}
}
#View(coM[coM$index>0,])
#nrow(coM[coM$date>"2008-01-01" & coM$date<"2014-01-01",])
#looking at all the albums (no duplicates for mulitple weeks on chart)
coMnd <- coM[!duplicated(coM$album),]
#dealing with out (the ones that didn't match)
coMout <- coMnd[coMnd$index==0,]
## looks for a match in in Pazz and Jop for an artist or album within a three year window
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[^A-Za-z0-9 ]", "", name)
#names <- gsub("[\\(\\)\\*\\$\\+\\?'\\[\\]]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$|^&$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
# gives you potential options to scroll through for coMout
checkOpts <- function(chart) {
optsData <- data.frame()
tempOpts <- data.frame()
for (i in 1:nrow(chart)) {
options <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
options <- cbind(rep(substring(chart[i,1], 1, 4), nrow(options)),
rep(paste(chart[i,3], chart[i,2], sep = ": "), nrow(options)),
options[,c(3,2,8)], stringsAsFactors=F)
names(options) <- c("year", "wno", "PJalbum", "PJartist", "index")
optsData <- rbind(optsData, options)
}
optsData
}
coLookAtEm <- checkOpts(coMout)
#double check with things like:
#View(pjM[grep("Prince", pjM$artist),])
#View(pjM[grep("True", pjM$album),])
#now look through and match manually (there must be another way, right?)
# uses the rbLookAtEm index (108 in the sample) to look up the right
# entry in coM and then replaces the index column with whatever (436 in the sample)
#   sample:
#   coM[coM$album==unlist(strsplit(rbLookAtEm[108,2], ": "))[2],4] <- 436
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(coM, "country weekly number ones.csv", row.names=F)
write.csv(coMnd, "country no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/data")
write.csv(coM, "country weekly number ones.csv", row.names=F)
write.csv(coMnd, "country no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/Billboard R and B/weekly top albums")
## got data from
## http://www.billboard.com/archive/charts/1985/r-b-hip-hop-albums
# builds weekly number ones list
wno <- list()
rbM <- data.frame()
year <- "1984"
for (i in 1:31) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("r and b ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
rbM <- rbind(rbM, wno[[i]])
}
#write.csv(rbM, "weekly number ones.csv", row.names=F)
names(rbM) <- c("date", "album", "artist")
weeksAlbum <- data.frame(table(rbM[,2]), stringsAsFactors=F)
weeksAlbum <- weeksAlbum[order(weeksAlbum$Freq, decreasing=T),]
weeksAlbum$Var1 <- as.character(weeksAlbum$Var1)
weeksArtist <- data.frame(table(rbM[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
rbM$index <- rep(0, nrow(rbM))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(rbM[grep("Timberlake", rbM$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(rbM)) {
pjPick <- pjM[pjM$year==substring(rbM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(rbM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(rbM[i,2])==tolower(pjPick[j,3])) {
rbM[i,4] <- pjPick[j,8]
}
}
}
}
#View(rbM[rbM$index>0,])
#nrow(rbM[rbM$date>"2008-01-01" & rbM$date<"2014-01-01",])
#looking at all the albums (no duplicates for mulitple weeks on chart)
rbMnd <- rbM[!duplicated(rbM$album),]
#dealing with out (the ones that didn't match)
rbMout <- rbMnd[rbMnd$index==0,]
## looks for a match in in Pazz and Jop for an artist or album within a three year window
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[^A-Za-z0-9 ]", "", name)
#names <- gsub("[\\(\\)\\*\\$\\+\\?'\\[\\]]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$|^&$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
# gives you potential options to scroll through for rbMout
checkOpts <- function(chart) {
optsData <- data.frame()
tempOpts <- data.frame()
for (i in 1:nrow(chart)) {
options <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
options <- cbind(rep(substring(chart[i,1], 1, 4), nrow(options)),
rep(paste(chart[i,3], chart[i,2], sep = ": "), nrow(options)),
options[,c(3,2,8)], stringsAsFactors=F)
names(options) <- c("year", "wno", "PJalbum", "PJartist", "index")
optsData <- rbind(optsData, options)
}
optsData
}
rbLookAtEm <- checkOpts(rbMout)
#double check with things like:
#View(pjM[grep("Prince", pjM$artist),])
#View(pjM[grep("True", pjM$album),])
#now look through and match manually (there must be another way, right?)
# uses the rbLookAtEm index (108 in the sample) to look up the right
# entry in rbM and then replaces the index column with whatever (436 in the sample)
#   sample:
#   rbM[rbM$album==unlist(strsplit(rbLookAtEm[108,2], ": "))[2],4] <- 436
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(rbsM, "r and b weekly number ones.csv", row.names=F)
write.csv(rbsMnd, "r and b no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/data")
write.csv(rbsM, "r and b weekly number ones.csv", row.names=F)
write.csv(rbsMnd, "r and b no duplicates.csv", row.names=F)
View(mrsMnd)
View(pjsM[grep("Gabriel", pjsM$artist),])
View(mrsM[grep("Gabriel", mrsM$artist),])
View(pjsM[grep("Pearl", pjsM$artist),])
View(pjsM[pjsM$year==1994,])
View(pjsM[pjsM$year==1993,])
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/")
year <- "1983"
h1YearStats <- data.frame()
for (i in 1:31) {
year <- (as.character(as.numeric(year)+1))
indices <- h1Mnd$index[substring(h1Mnd$date, 1, 4)==year]
h1YearStats[i,1] <- year
#percentage of #1's on crit list
h1YearStats[i,2] <- length(indices[indices>0]) / length(indices)
#number of #1's on crit list
h1YearStats[i,3] <- length(indices[indices>0])
#number of #1's (per year)
h1YearStats[i,4] <- length(indices)
#weeks at number #1 (avg and max)
ya <- h1Mnd[substring(h1Mnd$date, 1, 4)==year,]
weeks <- rep(0, nrow(ya))
ya <- cbind(ya, weeks)
for (j in 1:nrow(ya)) {
ya[j,5] <- nrow(h1M[ya[j,2]==h1M[,2] & ya[j,3]==h1M[,3],])
}
h1YearStats[i, 5] <- round(mean(ya$weeks),1)
h1YearStats[i, 6] <- max(ya$weeks)
#perc of weeks with a crit pick at #1
yaD <- h1M[substring(h1M$date, 1, 4)==year,]
h1YearStats[i, 7] <- length(yaD$index[yaD$index>0])/length(yaD$index)
}
names(h1YearStats) <- c("year", "percentage", "critPicks", "total", "avgWeeks", "mostWeeks", "percWeeks")
#write.csv(h1YearStats, "data/h1YearStats.csv", row.names=F)
# COUNTRY SINGLES
year <- "1983"
cosYearStats <- data.frame()
for (i in 1:31) {
year <- (as.character(as.numeric(year)+1))
indices <- cosMnd$index[substring(cosMnd$date, 1, 4)==year]
cosYearStats[i,1] <- year
#percentage of #1's on crit list
cosYearStats[i,2] <- length(indices[indices>0]) / length(indices)
#number of #1's on crit list
cosYearStats[i,3] <- length(indices[indices>0])
#number of #1's (per year)
cosYearStats[i,4] <- length(indices)
#weeks at number #1 (avg and max)
ya <- cosMnd[substring(cosMnd$date, 1, 4)==year,]
weeks <- rep(0, nrow(ya))
ya <- cbind(ya, weeks)
for (j in 1:nrow(ya)) {
ya[j,5] <- nrow(cosM[ya[j,2]==cosM[,2] & ya[j,3]==cosM[,3],])
}
cosYearStats[i, 5] <- round(mean(ya$weeks),1)
cosYearStats[i, 6] <- max(ya$weeks)
#perc of weeks with a crit pick at #1
yaD <- cosM[substring(cosM$date, 1, 4)==year,]
cosYearStats[i, 7] <- length(yaD$index[yaD$index>0])/length(yaD$index)
}
cosYearStats[1,2:7] <- NA
names(cosYearStats) <- c("year", "percentage", "critPicks", "total", "avgWeeks", "mostWeeks", "percWeeks")
#write.csv(cosYearStats, "data/cosYearStats.csv", row.names=F)
#R AND B SINGLES
year <- "1983"
rbsYearStats <- data.frame()
for (i in 1:31) {
year <- (as.character(as.numeric(year)+1))
indices <- rbsMnd$index[substring(rbsMnd$date, 1, 4)==year]
rbsYearStats[i,1] <- year
#percentage of #1's on crit list
rbsYearStats[i,2] <- length(indices[indices>0]) / length(indices)
#number of #1's on crit list
rbsYearStats[i,3] <- length(indices[indices>0])
#number of #1's (per year)
rbsYearStats[i,4] <- length(indices)
#weeks at number #1 (avg and max)
ya <- rbsMnd[substring(rbsMnd$date, 1, 4)==year,]
weeks <- rep(0, nrow(ya))
ya <- cbind(ya, weeks)
for (j in 1:nrow(ya)) {
ya[j,5] <- nrow(rbsM[ya[j,2]==rbsM[,2] & ya[j,3]==rbsM[,3],])
}
rbsYearStats[i, 5] <- round(mean(ya$weeks),1)
rbsYearStats[i, 6] <- max(ya$weeks)
#perc of weeks with a crit pick at #1
yaD <- rbsM[substring(rbsM$date, 1, 4)==year,]
rbsYearStats[i, 7] <- length(yaD$index[yaD$index>0])/length(yaD$index)
}
rbsYearStats[1,2:7] <- NA
names(rbsYearStats) <- c("year", "percentage", "critPicks", "total", "avgWeeks", "mostWeeks", "percWeeks")
#write.csv(rbsYearStats, "data/rbsYearStats.csv", row.names=F)
# MAINSTREAM ROCK SINGLES
year <- "1983"
mrsYearStats <- data.frame()
for (i in 1:31) {
year <- (as.character(as.numeric(year)+1))
indices <- mrsMnd$index[substring(mrsMnd$date, 1, 4)==year]
mrsYearStats[i,1] <- year
#percentage of #1's on crit list
mrsYearStats[i,2] <- length(indices[indices>0]) / length(indices)
#number of #1's on crit list
mrsYearStats[i,3] <- length(indices[indices>0])
#number of #1's (per year)
mrsYearStats[i,4] <- length(indices)
#weeks at number #1 (avg and max)
ya <- mrsMnd[substring(mrsMnd$date, 1, 4)==year,]
weeks <- rep(0, nrow(ya))
ya <- cbind(ya, weeks)
for (j in 1:nrow(ya)) {
ya[j,5] <- nrow(mrsM[ya[j,2]==mrsM[,2] & ya[j,3]==mrsM[,3],])
}
mrsYearStats[i, 5] <- round(mean(ya$weeks),1)
mrsYearStats[i, 6] <- max(ya$weeks)
#perc of weeks with a crit pick at #1
yaD <- mrsM[substring(mrsM$date, 1, 4)==year,]
mrsYearStats[i, 7] <- length(yaD$index[yaD$index>0])/length(yaD$index)
}
mrsYearStats[1,2:7] <- NA
names(mrsYearStats) <- c("year", "percentage", "critPicks", "total", "avgWeeks", "mostWeeks", "percWeeks")
#write.csv(mrsYearStats, "data/mrsYearStats.csv", row.names=F)
View(mrsYearStats)
View(rbsYearStats)
View(h1YearStats)
setwd("C:/Users/Seth/Documents/bandatablog/shiny2/")
write.csv(h1YearStats, "data/h1YearStats.csv", row.names=F)
write.csv(cosYearStats, "data/cosYearStats.csv", row.names=F)
write.csv(rbsYearStats, "data/rbsYearStats.csv", row.names=F)
write.csv(mrsYearStats, "data/mrsYearStats.csv", row.names=F)
