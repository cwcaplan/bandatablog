#View(pjM[grep("True", pjM$album),])
#now look through and match manually (there must be another way, right?)
wnoM[wnoM$album==unlist(strsplit(lookAtEm[108,2], ": "))[2],4] <- 436
wnoM[wnoM$album==unlist(strsplit(lookAtEm[491,2], ": "))[2],4] <- 565
wnoM[wnoM$album==unlist(strsplit(lookAtEm[499,2], ": "))[2],4] <- 565
wnoM[wnoM$album=="Soundtrack: Batman",4] <- 584
wnoM[wnoM$album==unlist(strsplit(lookAtEm[701,2], ": "))[2],4] <- 582
wnoM[wnoM$album==unlist(strsplit(lookAtEm[2912,2], ": "))[2],4] <- 938
wnoM[wnoM$album==unlist(strsplit(lookAtEm[4850,2], ": "))[2],4] <- 1232
wnoM[wnoM$album==unlist(strsplit(lookAtEm[5229,2], ": "))[2],4] <- 1260
wnoM[wnoM$album==unlist(strsplit(lookAtEm[5750,2], ": "))[2],4] <- 1333
#####LOAD R AND B####
setwd("C:/Users/Seth/Documents/bandatablog/Billboard R and B/weekly top albums")
# builds weekly number ones list
wno <- list()
rbM <- data.frame()
year <- "1984"
for (i in 1:31) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("r and b ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
rbM <- rbind(rbM, wno[[i]])
}
#write.csv(rbM, "weekly number ones.csv", row.names=F)
names(rbM) <- c("date", "album", "artist")
weeksAlbum <- data.frame(table(rbM[,2]), stringsAsFactors=F)
weeksAlbum <- weeksAlbum[order(weeksAlbum$Freq, decreasing=T),]
weeksAlbum$Var1 <- as.character(weeksAlbum$Var1)
weeksArtist <- data.frame(table(rbM[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
rbM$index <- rep(0, nrow(rbM))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(rbM[grep("Timberlake", rbM$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(rbM)) {
pjPick <- pjM[pjM$year==substring(rbM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(rbM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(rbM[i,2])==tolower(pjPick[j,3])) {
rbM[i,4] <- pjPick[j,8]
}
}
}
}
#View(rbM[rbM$index>0,])
#nrow(rbM[rbM$date>"2008-01-01" & rbM$date<"2014-01-01",])
#looking at all the albums (no duplicates for mulitple weeks on chart)
rbMnd <- rbM[!duplicated(rbM$album),]
#dealing with out (the ones that didn't match)
rbMout <- rbMnd[rbMnd$index==0,]
## looks for a match in in Pazz and Jop for an artist or album within a three year window
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[^A-Za-z0-9 ]", "", name)
#names <- gsub("[\\(\\)\\*\\$\\+\\?'\\[\\]]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$|^&$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
# gives you potential options to scroll through for rbMout
checkOpts <- function(chart) {
optsData <- data.frame()
tempOpts <- data.frame()
for (i in 1:nrow(chart)) {
options <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
options <- cbind(rep(substring(chart[i,1], 1, 4), nrow(options)),
rep(paste(chart[i,3], chart[i,2], sep = ": "), nrow(options)),
options[,c(3,2,8)], stringsAsFactors=F)
names(options) <- c("year", "wno", "PJalbum", "PJartist", "index")
optsData <- rbind(optsData, options)
}
optsData
}
rbLookAtEm <- checkOpts(rbMout)
#double check with things like:
#View(pjM[grep("Prince", pjM$artist),])
#View(pjM[grep("True", pjM$album),])
#now look through and match manually (there must be another way, right?)
# uses the rbLookAtEm index (108 in the sample) to look up the right
# entry in rbM and then replaces the index column with whatever (436 in the sample)
#   sample:
#   rbM[rbM$album==unlist(strsplit(rbLookAtEm[108,2], ": "))[2],4] <- 436
)
ptm <- proc.time()
setwd("C:/Users/Seth/Documents/bandatablog/Pazz and Jop")
#got info from
#2008-present
#http://www.villagevoice.com/pazznjop/albums/2008
#http://www.villagevoice.com/pazznjop/singles/2008
#year <- as.character(as.numeric(year)+1)
#year <- "1994"
#load data
#pj <- read.delim(paste("pazz and jop ", year, ".txt", sep=""),
#                       header=F, stringsAsFactors=F)
### 1974-2007 (the rest is below)
pj <- list()
pjM <- data.frame()
year <- "1973"
for (i in 1:34) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
pj[[i]] <- read.delim(paste("pazz and jop ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#deal with asterisks
pj[[i]] <- pj[[i]][,1:4]
#add year
pj[[i]]$year <- year
#add to master list
pjM <- rbind(pjM, pj[[i]])
}
#write.csv(wnoM, "weekly number ones.csv", row.names=F)
#for (i in 1:length(pj)) {
#    pjM <- rbind(pjM, pj[[i]])
#}
#get rid of rogue asterisks
pjM <- pjM[!pjM$V1=="*", ]
pjM <- pjM[!pjM$V1=="**", ]
#fix rows that we screwed up by asterisks
for (i in 1:nrow(pjM)) {
if(grepl("^[^0-9+\\.]", pjM[i,1])) {
pjM[i,4] <- pjM[i,3]
pjM[i,3] <- pjM[i,2]
pjM[i,2] <- pjM[i,1]
pjM[i,1] <- as.character(as.numeric(pjM[i-1,1])+1)
}
}
#split artist and album columns
albums <- character()
for (i in 1:nrow(pjM)) {
if(grepl(":", pjM[i,2])) {
info <- unlist(strsplit(pjM[i,2], ": "))
pjM[i,2] <- info[1]
albums[i] <- info[2]
} else {
albums[i] <- pjM[i,2]
}
}
pjM <- data.frame(rank=pjM$V1,
artist=pjM$V2,
album=albums,
points=pjM$V3,
mentions=pjM$V4,
year=pjM$year,
stringsAsFactors=F)
#make rank numeric
pjM$rank <- as.numeric(pjM$rank)
#get rid of label
for (i in 1:nrow(pjM)) {
pjM$label[i] <- unlist(strsplit(pjM$album[i], " \\("))[2]
pjM$album[i] <- unlist(strsplit(pjM$album[i], " \\("))[1]
}
pjM$label <- gsub("\\)", "", pjM$label)
#makes the year Date format, but just gives it whatever day it is currently
#pjM$year <- as.Date(pjM$year, "%Y")
#write.csv(pjM, "pazz and jop 1974-2007.csv", row.names=F)
#creating album index
pjM$index <- seq(1, nrow(pjM))
## 2008-2014
year <- "2007"
for (i in 35:41) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
pjN <- read.delim(paste("pazz and jop ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#split every other line
pj1 <- pjN[seq(1,79,2),]
pj2 <- pjN[seq(2,80,2),]
#split artist and album
pj1[,2] <- sub(", ", "~", pj1[,2])
trim.trailing <- function (x) sub("\\s+$", "", x)
for (j in 1:nrow(pj1)) {
both <- unlist(strsplit(pj1[j,2], "~"))
pj1[j,2] <- trim.trailing(both[1])
pj1[j,3] <- trim.trailing(both[2])
}
# build data frame for year
pj[[i]] <- data.frame(rank=pj1$V1,
artist=pj1$V2,
album=pj1$V3,
points=pj2$V2,
mentions=pj2$V3,
year=rep(year, nrow(pj1)),
label=pj2$V1,
index=seq(nrow(pjM)+1, by=1, length.out=40),
stringsAsFactors=F)
# attach to master
pjM <- rbind(pjM, pj[[i]])
}
#fixing duplicate indices
dups <- pjM[duplicated(pjM$album),]
dupsalb <- dups$album
#manually doing it
#look at them individually with this
#pjM[pjM$album==dupsalb[1],]
###we could do this automatically, but there might be two different albums with the same name
###and we wouldn't want to accidentally give them the same index
### pjM[pjM$album==dupsalb[13],] for instance
pjM[202,8] <- pjM[108,8]
pjM[204,8] <- pjM[169,8]
pjM[294,8] <- pjM[271,8]
pjM[313,8] <- pjM[286,8]
pjM[326,8] <- pjM[300,8]
pjM[337,8] <- pjM[277,8]
pjM[446,8] <- pjM[417,8]
pjM[454,8] <- pjM[432,8]
pjM[481,8] <- pjM[465,8]
pjM[534,8] <- pjM[504,8]
pjM[606,8] <- pjM[575,8]
pjM[1021,8] <- pjM[990,8]
pjM[1288,8] <- pjM[1269,8]
#write.csv(pjM, "pazz and jop 1974-2014.csv", row.names=F)
#####LOAD BILLBOARD####
setwd("C:/Users/Seth/Documents/bandatablog/Billboard 200/weekly top albums")
# builds weekly number ones list
wno <- list()
wnoM <- data.frame()
year <- "1982"
for (i in 1:33) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("weekly top albums ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
wnoM <- rbind(wnoM, wno[[i]])
}
#write.csv(wnoM, "weekly number ones.csv", row.names=F)
names(wnoM) <- c("date", "album", "artist")
weeksAlbum <- data.frame(table(wnoM[,2]), stringsAsFactors=F)
weeksAlbum <- weeksAlbum[order(weeksAlbum$Freq, decreasing=T),]
weeksAlbum$Var1 <- as.character(weeksAlbum$Var1)
weeksArtist <- data.frame(table(wnoM[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
wnoM$index <- rep(0, nrow(wnoM))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(wnoM[grep("Timberlake", wnoM$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(wnoM)) {
pjPick <- pjM[pjM$year==substring(wnoM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(wnoM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(wnoM[i,2])==tolower(pjPick[j,3])) {
wnoM[i,4] <- pjPick[j,8]
}
}
}
}
#nrow(wnoM[wnoM$date>"2008-01-01" & wnoM$date<"2014-01-01",])
#run for a specific year
for (i in nrow(wnoM[wnoM$date<"2008-01-01",]):nrow(wnoM[wnoM$date<="2009-01-01",])) {
pjPick <- pjM[pjM$year==substring(wnoM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(wnoM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(wnoM[i,2])==tolower(pjPick[j,3])) {
wnoM[i,4] <- pjPick[j,8]
}
}
}
}
#run for a specific album
for (i in 1348) {
pjPick <- pjM[pjM$year==substring(wnoM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(wnoM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(wnoM[i,2])==tolower(pjPick[j,3])) {
wnoM[i,4] <- pjPick[j,8]
}
}
}
}
#looking at all the albums (no duplicates for mulitple weeks on chart)
wnoMnd <- wnoM[!duplicated(wnoM$album),]
#dealing with out (the ones that didn't match)
out <- wnoMnd[wnoMnd$index==0,]
## looks for a match in in Pazz and Jop for an artist or album within a three year window
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[\\(\\)\\*\\$\\+\\?]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$|^&$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
#this guy is outdated for checkOpts, but I'm keeping him around for a minute to be sure
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
#outOpts <- checker(out)
# gives you potential options to scroll through for out
checkOpts <- function(chart) {
optsData <- data.frame()
tempOpts <- data.frame()
for (i in 1:nrow(chart)) {
options <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
options <- cbind(rep(substring(chart[i,1], 1, 4), nrow(options)),
rep(paste(chart[i,3], chart[i,2], sep = ": "), nrow(options)),
options[,c(3,2,8)], stringsAsFactors=F)
names(options) <- c("year", "wno", "PJalbum", "PJartist", "index")
optsData <- rbind(optsData, options)
}
optsData
}
lookAtEm <- checkOpts(out)
#double check with things like:
#View(pjM[grep("Prince", pjM$artist),])
#View(pjM[grep("True", pjM$album),])
#now look through and match manually (there must be another way, right?)
wnoM[wnoM$album==unlist(strsplit(lookAtEm[108,2], ": "))[2],4] <- 436
wnoM[wnoM$album==unlist(strsplit(lookAtEm[491,2], ": "))[2],4] <- 565
wnoM[wnoM$album==unlist(strsplit(lookAtEm[499,2], ": "))[2],4] <- 565
wnoM[wnoM$album=="Soundtrack: Batman",4] <- 584
wnoM[wnoM$album==unlist(strsplit(lookAtEm[701,2], ": "))[2],4] <- 582
wnoM[wnoM$album==unlist(strsplit(lookAtEm[2912,2], ": "))[2],4] <- 938
wnoM[wnoM$album==unlist(strsplit(lookAtEm[4850,2], ": "))[2],4] <- 1232
wnoM[wnoM$album==unlist(strsplit(lookAtEm[5229,2], ": "))[2],4] <- 1260
wnoM[wnoM$album==unlist(strsplit(lookAtEm[5750,2], ": "))[2],4] <- 1333
#####LOAD R AND B####
setwd("C:/Users/Seth/Documents/bandatablog/Billboard R and B/weekly top albums")
# builds weekly number ones list
wno <- list()
rbM <- data.frame()
year <- "1984"
for (i in 1:31) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("r and b ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
rbM <- rbind(rbM, wno[[i]])
}
#write.csv(rbM, "weekly number ones.csv", row.names=F)
names(rbM) <- c("date", "album", "artist")
weeksAlbum <- data.frame(table(rbM[,2]), stringsAsFactors=F)
weeksAlbum <- weeksAlbum[order(weeksAlbum$Freq, decreasing=T),]
weeksAlbum$Var1 <- as.character(weeksAlbum$Var1)
weeksArtist <- data.frame(table(rbM[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
rbM$index <- rep(0, nrow(rbM))
#a start but misses a lot from spelling, etc.
#for instance (FutureSex):
#View(rbM[grep("Timberlake", rbM$artist),])
#View(pjM[grep("Timberlake", pjM$artist),])
for (i in 1:nrow(rbM)) {
pjPick <- pjM[pjM$year==substring(rbM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(rbM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(rbM[i,2])==tolower(pjPick[j,3])) {
rbM[i,4] <- pjPick[j,8]
}
}
}
}
#View(rbM[rbM$index>0,])
#nrow(rbM[rbM$date>"2008-01-01" & rbM$date<"2014-01-01",])
#looking at all the albums (no duplicates for mulitple weeks on chart)
rbMnd <- rbM[!duplicated(rbM$album),]
#dealing with out (the ones that didn't match)
rbMout <- rbMnd[rbMnd$index==0,]
## looks for a match in in Pazz and Jop for an artist or album within a three year window
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[^A-Za-z0-9 ]", "", name)
#names <- gsub("[\\(\\)\\*\\$\\+\\?'\\[\\]]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$|^&$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
# gives you potential options to scroll through for rbMout
checkOpts <- function(chart) {
optsData <- data.frame()
tempOpts <- data.frame()
for (i in 1:nrow(chart)) {
options <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
options <- cbind(rep(substring(chart[i,1], 1, 4), nrow(options)),
rep(paste(chart[i,3], chart[i,2], sep = ": "), nrow(options)),
options[,c(3,2,8)], stringsAsFactors=F)
names(options) <- c("year", "wno", "PJalbum", "PJartist", "index")
optsData <- rbind(optsData, options)
}
optsData
}
rbLookAtEm <- checkOpts(rbMout)
#double check with things like:
#View(pjM[grep("Prince", pjM$artist),])
#View(pjM[grep("True", pjM$album),])
#now look through and match manually (there must be another way, right?)
# uses the rbLookAtEm index (108 in the sample) to look up the right
# entry in rbM and then replaces the index column with whatever (436 in the sample)
#   sample:
#   rbM[rbM$album==unlist(strsplit(rbLookAtEm[108,2], ": "))[2],4] <- 436
proc.time() - ptm
dim(yb)
yb[,2:3]
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
shiny::runApp('~/bandatablog/shiny1')
?isolate
shiny::runApp('~/bandatablog/shiny1')
length(wnoMnd$index)
