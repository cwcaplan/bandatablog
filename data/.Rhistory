plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 30*x*log2(x), col = "blue")
x <- 1:100
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
x <- 1:200
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
x <- 1:200
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
x <- 1:20
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
x <- 1:200
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
points(100,2000)
x <- 1:200
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
log2(50)
5.643856^2
2^5.643856
100/14
2^7.142857
x <- 141.3234
11*x*log2(x)+100*x
25*x*log2(x)
x <- 1:200
plot(x,(11*x*log2(x)+100*x))
lines(x, log2(x), col = "yellow")
lines(x, x*log2(x), col = "red")
lines(x, 25*x*log2(x), col = "blue")
points(141.3234,25236.32)
points(141.3234,25236.32, col="red")
points(141.3234,25236.32, col="red", pch=15)
x <- 1:200
plot(x, x^2)
lines(x, 10*x^2)
lines(x, x^3, col="blue")
lines(x, 100*x^2)
plot(x, x^3)
lines(x, 100*x^2, col="blue")
plot(x, 45*x^2 + 23*x)
lines(x, 200*x^2, col="blue")
x<- 1:20
plot(x, 45*x^2 + 23*x)
lines(x, 200*x^2, col="blue")
x<- 1:20
plot(x, 45*x^2 + 23*x)
lines(x, 20*x^2, col="blue")
x<- 1:20
plot(x, 45*x^2 + 23*x)
lines(x, 50*x^2, col="blue")
x<- 1:10
plot(x, 45*x^2 + 23*x)
lines(x, 50*x^2, col="blue")
4^2
23*4
45*16 + 92
50+16
50*16
x<- 1:10
plot(x, 20*x^2 + 23*x)
lines(x, 21*x^2, col="blue")
x<- 1:30
plot(x, 20*x^2 + 23*x)
lines(x, 21*x^2, col="blue")
20^2
23*20
20*400
8000+460
21^2
441*21
23*21
20*441
8820+483
20.5^2
20*20.5^2 + 23*20.5
20*21^2 + 23*21
x<- 1:30
plot(x, 20*x^2 + 23*x)
lines(x, 21*x^2, col="blue")
points(21, 9303, col="red", pch=14)
x<- 1:30
plot(x, 2000*x^2 + 23000*x)
x<- 1:3000
plot(x, 2000*x^2 + 23000*x)
x<- 1:3000
plot(x, 2000*x^2 + 23000*x)
lines(x, 2100*x^2, col="blue")
x<- 1:3000
plot(x, 2000*x^2 + 23000*x)
lines(x, 210*x^2, col="blue")
plot(x, 2000*x^2 + 23000*x)
lines(x, 2100*x^2, col="blue")
x<- 1:30000
plot(x, 2000*x^2 + 23000*x)
lines(x, 2100*x^2, col="blue")
x<- 1:60000
plot(x, 2000*x^2 + 23000*x)
lines(x, 2100*x^2, col="blue")
x<- 1:120000
plot(x, 2000*x^2 + 23000*x)
lines(x, 2100*x^2, col="blue")
x<- 1:120000
plot(x, 2000*x^2 + 23000*x)
lines(x, 2200*x^2, col="blue")
e
exp(1)
e <- exp(1)
e
-2
-e
-e^(-10/5)
-e^(-10000/5)
-e^(-100000000/5)
-e^(-.3/5)
-e^(-6/5)
e^(-6/5)
-e^-6/5
?integrate
integrate(x, 0, 1)
func <- function(x) {x}
func(4)
integrate(func, 0, 1)
func <- function(x) {x^2}
func(4)
integrate(func, 0, 1)
func <- function(t) {e^(-t/5) / 5}
integrate(func, 6, Inf)
func <- function(t) {(e^(-t/5))/ 5}
integrate(func, 6, Inf)
10^-5
10^-2
10/100
10^2
10/.01
10^.1
1/100
func <- function(t) {(1/e^.2*t)/5}
func(5)
func(1000)
e^.2*5
6*.2
e^1.2
?exp
e <- exp(1)
e
func <- function(t) {(e^(-t/5))/ 5}
integrate(func, 6, Inf)
func(6)
func <- function(t) {e^(-t/5)/ 5}
integrate(func, 6, Inf)
func <- function(x) {.5*exp(-x/2)}
integrate(func, 0, Inf)
?qexp
func(4)
install.packages("RCurl")
install.packages("shinyapps")
setwd("C:/Users/Seth/Documents/bandatablog/Billboard Hot 100/weekly top songs")
## got data from
## http://www.billboard.com/archive/charts/1983/hot-100
# builds weekly number ones list
wno <- list()
h1M <- data.frame()
year <- "1982"
for (i in 1:33) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
wno[[i]] <- read.delim(paste("hot100-", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#add year to date and convert to date format
wno[[i]][,1] <- paste(wno[[i]][,1], year)
wno[[i]][,1] <- as.Date(wno[[i]][,1], "%B %d %Y")
#replace blanks for multiple week winners
for (j in 1: nrow(wno[[i]])) {
if(nchar(wno[[i]][j+1,2])==0) {
wno[[i]][j+1,2] <- wno[[i]][j,2]
wno[[i]][j+1,3] <- wno[[i]][j,3]
}
}
h1M <- rbind(h1M, wno[[i]])
}
#write.csv(h1M, "weekly number ones.csv", row.names=F)
names(h1M) <- c("date", "song", "artist")
weeksSong <- data.frame(table(h1M[,2]), stringsAsFactors=F)
weeksSong <- weeksSong[order(weeksSong$Freq, decreasing=T),]
weeksSong$Var1 <- as.character(weeksSong$Var1)
weeksArtist <- data.frame(table(h1M[,3]), stringsAsFactors=F)
weeksArtist <- weeksArtist[order(weeksArtist$Freq, decreasing=T),]
weeksArtist$Var1 <- as.character(weeksArtist$Var1)
#adding album index to match pjM
h1M$index <- rep(0, nrow(h1M))
setwd("C:/Users/Seth/Documents/bandatablog/Pazz and Jop/singles")
#got info from
#1979-2007
#http://www.robertchristgau.com/xg/pnj/index.php
#2008-present
#http://www.villagevoice.com/pazznjop/singles/2008
### 1974-2007 (the rest is below)
pj <- list()
pjsM <- data.frame()
year <- "1978"
for (i in 1:29) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
pj[[i]] <- read.delim(paste("pj singles ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#deal with erroneous bump overs
for (k in 1:nrow(pj[[i]])) {
if(grepl("[^0-9\\.]", pj[[i]][k,1])) {
pj[[i]][k,4] <- pj[[i]][k,3]
pj[[i]][k,3] <- pj[[i]][k,2]
pj[[i]][k,2] <- pj[[i]][k,1]
pj[[i]][k,1] <- as.character(as.numeric(pj[[i]][k-1,1]))
}
}
#deal with ties
for (j in 1:nrow(pj[[i]])) {
if(!grepl("[0-9]", pj[[i]][j,1])) {
pj[[i]][j,4] <- pj[[i]][j,3]
pj[[i]][j,3] <- pj[[i]][j,2]
pj[[i]][j,2] <- pj[[i]][j,1]
pj[[i]][j,1] <- pj[[i]][j-1,1]
}
}
#deal with asterisks
pj[[i]] <- pj[[i]][,1:3]
#add year
pj[[i]]$year <- year
#add to master list
pjsM <- rbind(pjsM, pj[[i]])
}
#get rid of rogue asterisks
pjsM[571,2] <- "Nelly: (Hot Shit) Country Grammar (Universal)"
pjsM <- pjsM[!grepl("\\*", pjsM$V2),]
#split artist and song columns
songs <- character()
for (i in 1:nrow(pjsM)) {
if(grepl(":", pjsM[i,2])) {
info <- unlist(strsplit(pjsM[i,2], ": "))
pjsM[i,2] <- info[1]
songs[i] <- info[2]
} else {
songs[i] <- pjsM[i,2]
}
}
pjsM <- data.frame(rank=as.numeric(pjsM$V1),
artist=pjsM$V2,
song=songs,
votes=pjsM$V3,
year=pjsM$year,
stringsAsFactors=F)
#deal with of label
for (i in 1:nrow(pjsM)) {
boss <- unlist(strsplit(pjsM$song[i], " \\("))
if(length(boss)==2) {
pjsM$song[i] <- boss[1]
pjsM$label[i] <- boss[2]
} else if (length(boss)>2) {
pjsM$song[i] <- paste(boss[1:length(boss)-1], collapse= " (")
pjsM$label[i] <- boss[length(boss)]
}
}
pjsM$label <- gsub("\\)", "", pjsM$label)
#makes the year Date format, but just gives it whatever day it is currently
#pjsM$year <- as.Date(pjsM$year, "%Y")
#write.csv(pjsM, "pazz and jop 1974-2007.csv", row.names=F)
## 2008-2014
year <- "2007"
for (i in 35:41) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
pjN <- read.delim(paste("pj singles ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#split every other line
pj1 <- pjN[seq(1,79,2),]
pj2 <- pjN[seq(2,80,2),]
#split artist and album
pj1[,2] <- sub(", ", "~", pj1[,2])
trim.trailing <- function (x) sub("\\s+$", "", x)
for (j in 1:nrow(pj1)) {
both <- unlist(strsplit(pj1[j,2], "~"))
pj1[j,2] <- trim.trailing(both[1])
pj1[j,3] <- trim.trailing(both[2])
}
# build data frame for year
pj[[i]] <- data.frame(rank=pj1$V1,
artist=pj1$V2,
song=pj1$V3,
votes=pj2$V2,
year=rep(year, nrow(pj1)),
label=pj2$V1,
#index=seq(nrow(pjsM)+1, by=1, length.out=40),
stringsAsFactors=F)
# attach to master
pjsM <- rbind(pjsM, pj[[i]])
}
####GOT TO HERE
#creating album index
pjsM$index <- seq(1, nrow(pjsM))
#fixing duplicate indices
dups <- pjsM[duplicated(pjsM$song),]
dupssong <- dups$song
View(dupssong)
View(dups)
pjsM[pjsM$album==dupssong[1],]
pjsM[pjsM$song==dupssong[1],]
str(pjsM)
pjsM[202,7] <- pjsM[108,7]
View(pjsM[c(202,108),7])
View(pjsM[c(202,108),])
View(pjsM[c(200:205,105:110),])
pjsM[202,7] <- 202
View(pjsM[c(200:205,105:110),])
pjsM[pjsM$song==dupssong[1],]
pjsM[pjsM$song==dupssong[2],]
pjsM[pjsM$song==dupssong[3],]
pjsM[pjsM$song==dupssong[4],]
View(pjsM[298:305,])
pjsM[pjsM$song==dupssong[5],]
pjsM[pjsM$song==dupssong[6],]
pjsM[pjsM$song==dupssong[7],]
pjsM[pjsM$song==dupssong[8],]
pjsM[pjsM$song==dupssong[9],]
View(pjsM)
pjsM[pjsM$song==dupssong[10],]
pjsM[pjsM$song==dupssong[11],]
pjsM[pjsM$song==dupssong[12],]
pjsM[pjsM$song==dupssong[13],]
pjsM[pjsM$song==dupssong[14],]
pjsM[pjsM$song==dupssong[15],]
pjsM[pjsM$song==dupssong[16],]
pjsM[pjsM$song==dupssong[17],]
pjsM[pjsM$song==dupssong[18],]
pjsM[pjsM$song==dupssong[19],]
pjsM[pjsM$song==dupssong[20],]
pjsM[pjsM$song==dupssong[21],]
pjsM[pjsM$song==dupssong[22],]
pjsM[pjsM$song==dupssong[23],]
pjsM[pjsM$song==dupssong[24],]
pjsM[pjsM$song==dupssong[25],]
pjsM[pjsM$song==dupssong[26],]
pjsM[pjsM$song==dupssong[27],]
pjsM[pjsM$song==dupssong[28],]
pjsM[pjsM$song==dupssong[29],]
pjsM[pjsM$song==dupssong[30],]
pjsM[pjsM$song==dupssong[31],]
pjsM[pjsM$song==dupssong[32],]
pjsM[pjsM$song==dupssong[33],]
View(dups)
#look at them individually with this
#pjsM[pjsM$song==dupssong[1],]
###we could do this automatically, but there might be two different albums with the same name
###and we wouldn't want to accidentally give them the same index
### pjsM[pjsM$album==dupsalb[13],] for instance
pjsM[83,7] <- pjsM[60,7]
pjsM[158,7] <- pjsM[142,7]
pjsM[263,7] <- pjsM[258,7]
pjsM[320,7] <- pjsM[305,7]
pjsM[343,7] <- pjsM[330,7]
pjsM[448,7] <- pjsM[430,7]
pjsM[491,7] <- pjsM[462,7]
pjsM[596,7] <- pjsM[563,7]
pjsM[699,7] <- pjsM[640,7]
pjsM[721,7] <- pjsM[690,7]
pjsM[735,7] <- pjsM[703,7]
pjsM[753,7] <- pjsM[713,7]
pjsM[754,7] <- pjsM[714,7]
pjsM[783,7] <- pjsM[720,7]
pjsM[843,7] <- pjsM[819,7]
pjsM[866,7] <- pjsM[809,7]
pjsM[875,7] <- pjsM[840,7]
pjsM[1082,7] <- pjsM[1049,7]
pjsM[1141,7] <- pjsM[1109,7]
View(pjsM)
View(pjsM[grep("Wu", pjsM$artist),])
View(pjsM[grep("Meth", pjsM$artist),])
h1M[i,2]
i
h1M[i,3]
i <- 443
i
h1M[i,3]
pjsM[443,2]
pjsM[443:470,2]
pjsM[443:470,3]
pjsM[446,3]
pjsM[447,3]
pjsM[445,3]
unlist(strsplit(pjsM[445,3], " \\("))
unlist(strsplit(pjsM[445,3], " \\("))[1]
tolower(unlist(strsplit(pjsM[445,3], " \\("))[1])
h1M[i,2]
for (i in 1:nrow(h1M)) {
pjPick <- pjsM[pjsM$year==substring(h1M[i,1], 1, 4) |
pjsM$year==as.character(as.numeric(substring(h1M[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(h1M[i,2])==tolower(unlist(strsplit(pjPick[j,3], " \\("))[1])) {
h1M[i,4] <- pjPick[j,7]
}
}
}
}
length(h1M[,2])
length(is.na(h1M[,2]))
?is.na
h1M[4,2]
is.na(h1M[4,2])
View(h1M[is.na(h1M[,2])])
View(pjsM[is.na(pjsM[,3])])
View(pjsM[is.na(pjsM[,3]),])
length(pjsM[is.na(pjsM[,3]),])
nrow(pjsM[is.na(pjsM[,3]),])
nrow(pjsM[!is.na(pjsM[,3]),])
nrow(pjsM)
pjsM <- pjsM[!is.na(pjsM[,3]),]
nrow(pjsM)
for (i in 1:nrow(h1M)) {
pjPick <- pjsM[pjsM$year==substring(h1M[i,1], 1, 4) |
pjsM$year==as.character(as.numeric(substring(h1M[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(h1M[i,2])==tolower(unlist(strsplit(pjPick[j,3], " \\("))[1])) {
h1M[i,4] <- pjPick[j,7]
}
}
}
}
View(h1M)
getwd()
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(pjsM, "pj singles 1979-2014.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
View(h1Mnd)
h1Mnd <- h1M[!duplicated(h1M$song),]
View(h1Mnd)
write.csv(h1Mnd, "hot 100 weekly number ones.csv", row.names=F)
write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
write.csv(h1Mnd, "hot 100 no duplicates.csv", row.names=F)
View(psjM[grep("Prince", psjM$artist),])
View(pjsM[grep("Prince", pjsM$artist),])
i <- 216
j <- 216
song <- tolower(unlist(strsplit(pjPick[j,3], " \\("))[1])
song
song <- tolower(unlist(strsplit(pjsM[j,3], " \\("))[1])
song
unlist(strsplit(song, "/"))
length(song)
length(unlist(strsplit(song, "/")))
for (i in 1:nrow(h1M)) {
pjPick <- pjsM[pjsM$year==substring(h1M[i,1], 1, 4) |
pjsM$year==as.character(as.numeric(substring(h1M[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies, DECIDED AGAINST
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
song <- tolower(unlist(strsplit(pjPick[j,3], " \\("))[1])
song <- unlist(strsplit(song, "/"))
if(length(song)==1) {
if(tolower(h1M[i,2])==song) {
h1M[i,4] <- pjPick[j,7]
}
} else if (length(song)==2) {
if(tolower(h1M[i,2])==song[1]|tolower(h1M[i,2])==song[2]) {
h1M[i,4] <- pjPick[j,7]
}
}
}
}
}
VieW(h1M[grep("Prince", h1M$artist),])
View(h1M[grep("Prince", h1M$artist),])
h1Mnd <- h1M[!duplicated(h1M$song),]
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
write.csv(h1Mnd, "hot 100 no duplicates.csv", row.names=F)
setwd("C:/Users/Seth/Documents/bandatablog/data")
write.csv(h1M, "hot 100 weekly number ones.csv", row.names=F)
write.csv(h1Mnd, "hot 100 no duplicates.csv", row.names=F)
