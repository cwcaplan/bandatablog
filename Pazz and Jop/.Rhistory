wnoM$index <- rep(0, nrow(wnoM))
#a start but only gets about 75 records
for (i in 1:nrow(wnoM[wnoM$date<"2008-01-01",])) {
pjPick <- pjM[pjM$year==substring(wnoM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(wnoM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(wnoM[i,2])==tolower(pjPick[j,3])) {
wnoM[i,4] <- pjPick[j,8]
}
}
}
}
# head(table(wnoM[!duplicated(wnoM$album),4]))
wnoMND <- wnoM[!duplicated(wnoM$album),]
out <- wnoMND[wnoMND$index==0,]
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
artists <- pjPick[grep(tolower(name), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(name), tolower(pjPick$album)),]
picks <- rbind(artists, albums)
picks
}
setwd("C:/Users/Seth/Documents/bandatablog/Pazz and Jop")
#year <- as.character(as.numeric(year)+1)
#year <- "1994"
#load data
#pj <- read.delim(paste("pazz and jop ", year, ".txt", sep=""),
#                       header=F, stringsAsFactors=F)
pj <- list()
pjM <- data.frame()
year <- "1973"
for (i in 1:34) {
#set year
year <- as.character(as.numeric(year)+1)
#load data
pj[[i]] <- read.delim(paste("pazz and jop ", year, ".txt", sep=""),
header=F, stringsAsFactors=F)
#deal with asterisks
pj[[i]] <- pj[[i]][,1:4]
#add year
pj[[i]]$year <- year
pjM <- rbind(pjM, pj[[i]])
}
#write.csv(wnoM, "weekly number ones.csv", row.names=F)
#for (i in 1:length(pj)) {
#    pjM <- rbind(pjM, pj[[i]])
#}
#get rid of rogue asterisks
pjM <- pjM[!pjM$V1=="*", ]
pjM <- pjM[!pjM$V1=="**", ]
#fix rows that we screwed up by asterisks
for (i in 1:nrow(pjM)) {
if(grepl("^[^0-9+\\.]", pjM[i,1])) {
pjM[i,4] <- pjM[i,3]
pjM[i,3] <- pjM[i,2]
pjM[i,2] <- pjM[i,1]
pjM[i,1] <- as.character(as.numeric(pjM[i-1,1])+1)
}
}
#split artist and album columns
albums <- character()
for (i in 1:nrow(pjM)) {
if(grepl(":", pjM[i,2])) {
info <- unlist(strsplit(pjM[i,2], ": "))
pjM[i,2] <- info[1]
albums[i] <- info[2]
} else {
albums[i] <- pjM[i,2]
}
}
pjM <- data.frame(rank=pjM$V1,
artist=pjM$V2,
album=albums,
points=pjM$V3,
mentions=pjM$V4,
year=pjM$year,
stringsAsFactors=F)
#make rank numeric
pjM$rank <- as.numeric(pjM$rank)
#get rid of label
for (i in 1:nrow(pjM)) {
pjM$label[i] <- unlist(strsplit(pjM$album[i], " \\("))[2]
pjM$album[i] <- unlist(strsplit(pjM$album[i], " \\("))[1]
}
pjM$label <- gsub("\\)", "", pjM$label)
#makes the year Date format, but just gives it whatever day it is currently
#pjM$year <- as.Date(pjM$year, "%Y")
#write.csv(pjM, "pazz and jop 1974-2007.csv", row.names=F)
#creating album index
pjM$index <- seq(1, nrow(pjM))
#fixing duplicate indices
dups <- pjM[duplicated(pjM$album),]
dupsalb <- dups$album
#manually doing it
#look at them individually with this
#pjM[pjM$album==dupsalb[1],]
###we could do this automatically, but there might be two different albums with the same name
###and we wouldn't want to accidentally give them the same index
### pjM[pjM$album==dupsalb[13],] for instance
pjM[202,8] <- pjM[108,8]
pjM[204,8] <- pjM[169,8]
pjM[294,8] <- pjM[271,8]
pjM[313,8] <- pjM[286,8]
pjM[326,8] <- pjM[300,8]
pjM[337,8] <- pjM[277,8]
pjM[446,8] <- pjM[417,8]
pjM[454,8] <- pjM[432,8]
pjM[481,8] <- pjM[465,8]
pjM[534,8] <- pjM[504,8]
pjM[606,8] <- pjM[575,8]
pjM[1021,8] <- pjM[990,8]
pjM[1288,8] <- pjM[1269,8]
heart <- "heart of the city"
strsplit(heart, " ")
hearts <- unlist(strsplit(heart, " "))
hearts
length(hearts)
lookerA <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
names <- unlist(strsplit(name, " "))
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
lookerA("prince", "1984")
lookerA <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
names <- unlist(strsplit(name, " "))
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
lookerA("prince", "1984")
lookerA("purp", "1984")
lookerA("born in the usa", "1984")
lookerA("born in the u.s.a.", "1984")
born <- lookerA("born in the u.s.a.", "1984")
View(born)
name <- "born in the u.s.a."
names
name
names <- unlist(strsplit(name, " "))
names <- names[!grepl("[Aa]|[Oo]f|[Ii]n|[Tt]he|[Aa]t|I|[Ii]t")]
names <- unlist(strsplit(name, " "))
names <- names[!grepl("[Aa]|[Oo]f|[Ii]n|[Tt]he|[Aa]t|I|[Ii]t", names)]
names
names
name
names <- unlist(strsplit(name, " "))
names
names <- names[!grepl("[Aa]|[Oo]f|[Ii]n|[Tt]he|[Aa]t|I|[Ii]t", names, fixed=T)]
names
?grep
grep("in", names, fixed=T)
grep("[Ii]n", names, fixed=T)
grep("in|In", names, fixed=T)
grep("In", names, fixed=T, ignore.case=T)
grep("a", names)
grep("a", names, fixed=T)
grep("in", names, fixed=T)
grep("i", names, fixed=T)
grep("or", names, fixed=T)
grep("^or$", names, fixed=T)
grep("^a$", names, fixed=T)
grep("^in$", names, fixed=T)
names
grep("^in$", names)
grep("^a$", names)
grep("^or$", names)
grep("^the$", names)
grep("^he$", names)
grep("^[Th]he$", names)
grep("^[Tt]he$", names)
grep("^The$", names, ignore.case=T)
grep("^the$|^In$", names)
grep("^the$|^[Ii]n$", names)
grep("^[Tt]he$|^[Ii]n$", names)
lookerA <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#split words and expunge stop words
names <- unlist(strsplit(name, " "))
#names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|^[Aa]t$|^[Ii]$|^[Ii]t$", names)]
names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
born <- lookerA("born in the u.s.a.", "1984")
lookerA <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#split words and expunge stop words
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|^[Aa]t$|^[Ii]$|^[Ii]t$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
born <- lookerA("born in the u.s.a.", "1984")
View(born)
# more advanced, can take a string of multiple words
lookerA <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#split words and expunge stop words
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
## looks for a match in in Pazz and Jop for an artist or album within a three year window
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#split words and expunge stop words
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
out[1,2]
View(out)
out[2,2]
paste(out[2,2], out[2,3])
substring(out[1,1], 1, 4)
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#split words and expunge stop words
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
outs <- checker(out[1:10])
outs <- checker(out[1:10,])
View(outs[[1]])
View(outs[[2]])
View(outs[[3]])
View(wnoM)
wnoMND <- wnoM[!duplicated(wnoM$album),]
View(wnoMD)
View(wnoMND)
wnoMnd <- wnoM[!duplicated(wnoM$album),]
View(wnoMnd)
#a start but only gets about 75 records
for (i in 1:nrow(wnoM[wnoM$date<"2008-01-01",])) {
pjPick <- pjM[pjM$year==substring(wnoM[i,1], 1, 4) |
pjM$year==as.character(as.numeric(substring(wnoM[i,1], 1, 4))-1), ]
#dealing with puncuation idiosynchrosies
#pjPick$album <- gsub("'", " ", pjPick$album)
#pjPick$album <- gsub("[^A-Za-z0-9 ]", "", pjPick$album)
#matching, but only lower case
if (nrow(pjPick)>0) {
for (j in 1:nrow(pjPick)) {
if(tolower(wnoM[i,2])==tolower(pjPick[j,3])) {
wnoM[i,4] <- pjPick[j,8]
}
}
}
}
wnoMnd <- wnoM[!duplicated(wnoM$album),]
out <- wnoMnd[wnoMnd$index==0,]
View(wnoMnd)
View(out)
looker("sade", "1986")
looker("sade", "1987")
looker("sade", "1984")
looker("sade", "1983")
looker("sade", "1986")
outOpts <- checker(out)
str(out)
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[\\(\\)\\*\\$\\+\\?", "", )
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
# gives you potential options to scroll through for out
outOpts <- checker(out)
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[\\(\\)\\*\\$\\+\\?", "", names)
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
# gives you potential options to scroll through for out
outOpts <- checker(out)
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[\\(\\)\\*\\$\\+\\?]", "", names)
names <- unlist(strsplit(name, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
# gives you potential options to scroll through for out
outOpts <- checker(out)
grep("\\(", out$album)
View(out[grep("\\(", out$album),])
View(out[grep("\\$", out$album),])
out[71,2]
names <- "Timeless (The Classics)"
names
names <- gsub("[\\(\\)\\*\\$\\+\\?]", "", names
)
names
names <- unlist(strsplit(name, " "))
names
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[\\(\\)\\*\\$\\+\\?]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
# gives you potential options to scroll through for out
outOpts <- checker(out)
View(outOpts[[1]])
outOpts[[1]]
outOpts[[2]]
outOpts[[3]]
outOpts[[4]]
looker <- function(name, years) {
pjPick <- pjM[pjM$year==years |
pjM$year==as.character(as.numeric(years)-1)
| pjM$year==as.character(as.numeric(years)+1), ]
#get rid of regex bombs, split words, and expunge stop words
names <- gsub("[\\(\\)\\*\\$\\+\\?]", "", name)
names <- unlist(strsplit(names, " "))
names <- names[!grepl("^[Aa]$|^[Oo]f$|^[Ii]n$|^[Tt]he$|
^[Aa]t$|^[Ii]$|^[Ii]t$|^[Tt]o$|^&$", names)]
#names <- names[!grepl["in"]]
picks <- data.frame()
for (i in 1:length(names)){
artists <- pjPick[grep(tolower(names[i]), tolower(pjPick$artist)),]
albums <- pjPick[grep(tolower(names[i]), tolower(pjPick$album)),]
picks <- rbind(picks, artists, albums)
}
picks
}
checker <- function(chart) {
options <- list()
for (i in 1:nrow(chart)) {
options[[i]] <- looker(paste(chart[i,2], chart[i,3]),
substring(chart[i,1], 1, 4))
}
options
}
# gives you potential options to scroll through for out
outOpts <- checker(out)
outOpts[[4]]
outOpts[[5]]
looker("Madonna", "1985")
looker("Madonna", "1986")
looker("Madonna", "1987")
looker("Madonna", "1988")
outOpts[[6]]
outOpts[[7]]
outOpts[[8]]
outOpts[[9]]
outOpts[[10]]
outOpts[[11]]
outOpts[[12]]
View(pjM[grep("�", pjM$artist),])
View(pjM[grep("ker, pjM$artist),])
)""
"
View(pjM[grep("ker", pjM$artist),])
View(pjM[c(360, 398, 400, 444, 482),])
pjM[441,]
outOpts[[12]]
outOpts[[13]]
